{"changed":false,"filter":false,"title":"index.js","tooltip":"/routes/index.js","value":"var express = require('express');\nvar app = express();\nvar router = express.Router();\nvar User = require('../models/user');\nvar Message = require('../models/message');\nvar Post = require('../models/post');\nvar marked = require('marked');\n//var sanitizeHtml = require('sanitize-html');\nvar twitter = require('twitter-text');\nvar mongoose = require('mongoose');\nvar CryptoJS = require(\"crypto-js\");\nvar crypto = require(\"crypto\");\nvar email = require('emailjs');\n\n\n//var http = require('http').Server(app);\n//var io = require('socket.io')(http);\n\n/* home */\nrouter.get('/', function(req, res, next) {\n    /*\n    User.update({}, {schange:[]}, {multi:true}, function(err) {\n        if (err) throw (err);\n    });*/\n    /*\n    var msg = new Message({\n        users: [\"drew\", \"bruh\"],\n        contents: [({value:\"Cool dude\", date: new Date(), by:\"drew\"})],\n    });\n    msg.save();*/\n   /*\n   User.update({}, {$push: {schange: {bodycolor:\"#FFF\"}}}, {multi: true}, function(err) {\n        if (err) throw err;\n    }); \n    */\n    /*\n    Post.update({}, {commentslist.dislikes:0}, {multi: true}, function(err) {\n        if (err) throw err;\n    });*/\n \n    \n    User.find({}, function(err, users) {\n      if (err) return next(err);\n      if (req.user) {\n          \n          console.log(req.user.following);\n          \n              var notcount=req.user.notamount;\n          var limit=20;\n          var bcolor;\n          \n          Post.find({ 'author': { $in: req.user.following } }, null, { sort: '-created'},  function(err, followings) {\n            if (err) return next(err);\n            res.render('index', { title: 'ShareCookie', filter: 'date', posts: followings, user: req.user, notes:notcount, header:\"My Timeline\", bcolor:req.user.schange});\n          });\n        \n      } else { \n          Post.find({}, null, { sort: '-created'}, function (err, posts) {\n            if (err) return next(err);\n            res.render('index', { title: 'ShareCookie', filter: 'date', posts: posts, user: req.user, limit});\n          });\n      }\n      \n    });\n    \n   /* User.count({},  function(err, counted){\n     if (err) throw err;   \n    Post.find({}, null, { sort: '-created' }, function (err, posts) {\n        if (err) return next(err);\n        \n    }); \n    });*/\n});\n\n/* sort by date */\nrouter.get('/filter/date', ensureAuthenticated,function(req, res, next) {\n    Post.find({}, null, { sort: '-created' }, function (err, posts) {\n        if (err) return next(err);\n        res.render('index', { title: 'ShareCookie', filter: 'date', posts: posts, user: req.user });\n    });\n});\n\n/* sort by likes */\nrouter.get('/public', ensureAuthenticated, function(req, res, next) {\n    if (req.user) {\n          \n              var notcount=req.user.notamount;\n\n    Post.find({locked:false}, null, { sort: '-created' }, function (err, posts) {\n        if (err) return next(err);\n        res.render('index', { title: 'ShareCookie', filter: 'likes', posts: posts, user: req.user, notes:notcount,  header:\"Public Timeline\" });\n    });\n    } else {\n        res.redirect(\"/\");\n    }\n});\n\n/* like comment *//*\nrouter.get('/likecomment/:root/:id/:return/:group', ensureAuthenticated, function(req, res, next) {\n    \n    User.findById(req.user.id, function(err, doc){\n        console.log(doc);\n        var nid = req.params.id.toString()\n        var nlikes = doc.likes.toString();\n        var test = nlikes.indexOf(nid);\n        console.log(test);\n        if (test<0){\n        doc.likes.push({ keys: req.params.root.toString()});\n        doc.save();\n        \n        Post.findOne({ _id: req.params.id }, function (err, docs){\n            docs.likes=docs.likes+1;\n            if (docs.likes<=-1){\n                 docs.color=\"red\";\n            } else {\n                docs.color=\"blacK\";\n            }\n            docs.save();\n            if (err) throw err;\n        User.findOne({username:docs.author}, function(err, doc) {\n        if (err) return next(err);\n       doc.notamount=doc.notamount+1;\n       doc.notifications.unshift({from: req.user.username, type: \"like\", redirect:req.params.id, mini:marked(docs.content)});\n       doc.save();\n    });\n        });\n   \n        console.log(\"done!\");\n        \n        } else if (test>0) {\n\n}\n});\n});*/\n\n/* Like Post */\n\nrouter.get('/likepost/:author/:id/:return/:group', ensureAuthenticated, function(req, res, next) {\n    \n    User.findById(req.user.id, function(err, doc){\n        console.log(doc);\n        var nid = req.params.id.toString()\n        var nlikes = doc.likes.toString();\n        var test = nlikes.indexOf(nid);\n        console.log(test);\n        if (test<0){\n        doc.likes.push({ keys: req.params.id.toString()});\n        doc.save();\n        \n        Post.findOne({ _id: req.params.id }, function (err, docs){\n            docs.likes=docs.likes+1;\n            if (docs.likes<=-1){\n                 docs.color=\"red\";\n            } else {\n                docs.color=\"blacK\";\n            }\n            docs.save();\n            if (err) throw err;\n        User.findOne({username:docs.author}, function(err, doc) {\n        if (err) return next(err);\n       doc.notamount=doc.notamount+1;\n       doc.notifications.unshift({from: req.user.username, type: \"like\", redirect:req.params.id, mini:marked(docs.content)});\n       doc.save();\n    });\n        });\n        if (req.params.return==\"home\"){\n        res.redirect('/');\n        };\n        if (req.params.return==\"cookie\"){\n        res.redirect('/cookie/'+req.params.id);\n        };\n        if (req.params.return==\"group\"){\n        res.redirect('/group/'+req.params.group);\n        };\n        if (req.params.return==\"user\"){\n            res.redirect('/user/'+req.params.author);\n        }\n        console.log(\"done!\");\n        \n        } else if (test>0) {\n            console.log(\"cant like again!\");\n                    if (req.params.return==\"home\"){\n        res.redirect('/');\n        };\n        if (req.params.return==\"cookie\"){\n        res.redirect('/cookie/'+req.params.id);\n        };\n        if (req.params.return==\"group\"){\n        res.redirect('/group/'+req.params.group);\n        };\n        if (req.params.return==\"user\"){\n            res.redirect('/user/'+req.params.author);\n        }\n            \n        }\n        if (err) throw err;\n});\n});\n\n/* Dislike Post */\n\nrouter.get('/dislikepost/:author/:id/:return/:group', ensureAuthenticated, function(req, res) {\n    User.findById(req.user.id, function(err, doc){\n        console.log(doc);\n        var nid = req.params.id.toString();\n        var nlikes = doc.dislikes.toString();\n        var test = nlikes.indexOf(nid);\n        console.log(test);\n        if (test<0){\n        doc.dislikes.push({ keys: req.params.id.toString()});\n        doc.save();\n        \n        Post.findOne({ _id: req.params.id }, function (err, docs){\n            docs.dislikes=docs.dislikes+1;\n            if (docs.likes<=-1){\n                 docs.color=\"red\";\n            } else {\n                docs.color=\"blacK\";\n            }\n            docs.save();\n            if (err) throw err;\n            User.findOne({username:docs.author}, function(err, doc) {\n        if (err) return (err);\n       doc.notamount=doc.notamount+1;\n       doc.notifications.unshift({from: req.user.username, type: \"dislike\", redirect:req.params.id, mini:marked(docs.content)});\n       doc.save();\n            });\n        });\n        if (req.params.return==\"home\"){\n        res.redirect('/');\n        };\n        if (req.params.return==\"cookie\"){\n        res.redirect('/cookie/'+req.params.id);\n        };\n        if (req.params.return==\"group\"){\n        res.redirect('/group/'+req.params.group);\n        };\n        if (req.params.return==\"user\"){\n            res.redirect('/user/'+req.params.author);\n        }\n        console.log(\"done!\");\n        \n        } else if (test>0) {\n            console.log(\"cant dislike again!\");\n        if (req.params.return==\"home\"){\n        res.redirect('/');\n        };\n        if (req.params.return==\"cookie\"){\n        res.redirect('/cookie/'+req.params.id);\n        };\n        if (req.params.return==\"group\"){\n        res.redirect('/group/'+req.params.group);\n        };\n        if (req.params.return==\"user\"){\n            res.redirect('/user/'+req.params.author);\n        }\n            \n        }\n        if (err) throw err;\n});\n});\n\nrouter.get('/rebake/:author/:id/:return/:group', function(req, res, next) {\n    Post.findOne({\"_id\":req.params.id}, function(err, cookie) {\n        if (err) return next (err);\n        console.log(cookie);\n    res.render('rebake', {cookie:cookie, user:req.user});\n    });\n});\n\nrouter.post('/rbake/:id', function(req, res, next) {\n    \n    var newid = mongoose.Types.ObjectId();\n    \n        Post.findOne({ _id: req.params.id }, function (err, docs){\n            docs.rebakes=docs.rebakes+1;\n            docs.save();\n            if (err) throw err;\n        User.findOne({username:docs.author}, function(err, doc) {\n        if (err) return next(err);\n       doc.notamount=doc.notamount+1;\n       doc.notifications.unshift({from: req.user.username, type: \"rebake\", redirect:req.params.id, mini:marked(docs.content)});\n       doc.save();\n       \n       var contentq = req.body.texxtt;\n       var group = [];\n       \n       var hashtags = twitter.extractHashtags(contentq);\n    var i\n    for (i = 0; i < hashtags.length; i++) { \n    console.log(hashtags[i]);\n    var newc = contentq.replace(\"~\"+hashtags[i],\"<a style=\\\"text-decoration:none; color:#6666ff\\\" href=\\\"/chip/\"+hashtags[i].toLowerCase()+\"\\\">\"+\"~\"+hashtags[i].toLowerCase()+\"</a>\");\n    console.log(newc);\n    contentq=newc;\n    group.push(hashtags[i]);\n    \n    }\n    console.log(group);\n    \n    var rawcontent=contentq;\n    var usernames = twitter.extractMentions(contentq);\n    var i\n    for (i = 0; i < usernames.length; i++) { \n    console.log(usernames[i]);\n    var newc = contentq.replace(\"@\"+usernames[i],\"<a style=\\\"text-decoration:none; color:#6666ff\\\" href=\\\"/user/\"+usernames[i]+\"\\\">\"+\"@\"+usernames[i]+\"</a>\");\n    console.log(newc);\n    contentq=newc;\n    User.findOne({username:usernames[i]}, function(err, doc) {\n        if (err) return next(err);\nif (doc == null) {\n    console.log(\"fail\");\n} else {\n       doc.notamount=doc.notamount+1;\n       doc.notifications.unshift({from: req.user.username, type: \"mention\", redirect:\"/cookie/\"+newid, mini:marked(contentq)});\n       doc.save();\n}\n    });\n    }\n       \n       var newpost = new Post({\n        //title: mynewtitle,\n        _id:newid,\n        names: req.user.name+\" &nbsp;<i><font size=\\\"3\\\" color=\\\"Black\\\"><span class=\\\"glyphicon glyphicon-retweet\\\" aria-hidden=\\\"true\\\"></span>&nbsp; <a style=\\\"text-decoration:none; color=\\\"#6666ff\\\" href=\\\"/user/\"+docs.author+\"\\\">@\"+docs.author+\"</a></font></i>\",\n        author: req.user.username,\n        _author: req.user.id,\n        content: marked(contentq),\n        avatarurl: req.user.avatarurl,\n        rawcontent: req.body.texxtt,\n        myurl: docs.myurl,\n        link: docs.gurl,\n        color: docs.color,\n        group: docs.group,\n        spam: 0,\n        likes: 0,\n        dislikes: 0,\n        rebakes: 0,\n        commentamount: 0,\n        created: new Date(),\n    });\n    newpost.save();\nres.redirect(\"/\");\n});\n});\n});\n\n/* Post Cookie */\nrouter.post('/sharecookie', ensureAuthenticated, function(req, res, next) {\n    var badWord = /fuck|shit|cunt|damn|nigger|nigga|twat|dick|cum|tits|titties|boob|boobs|penis|cock|bbc|porn|pornography|rape|sex|orgasm|raping|bitch|ass|clit|clitoris|breast|breasts|wigger|faggot/gi;\n    var authorq=req.user.username;\n    var contentq = req.body.texxtt;\n    var url=req.body.picbox;\n    var gurl=req.body.urlbox;\n    var color=\"blacK\";\n    var group=[];\n    var ggroup=req.body.groupbox;\n    var mynewurl = req.body.url;\n    console.log(mynewurl);\n    var id2 = Math.floor(Math.random() * (9999999999 - 1 + 1)) + 1;\n    var newid = mongoose.Types.ObjectId();\n    \n/*\nvar newname = getUserName(contentq);\nconsole.log(newname);\ncontentq.replace(newname, \"hi\");\n    */\n    \n    var hashtags = twitter.extractHashtags(contentq);\n    var i\n    for (i = 0; i < hashtags.length; i++) { \n    console.log(hashtags[i]);\n    var newc = contentq.replace(\"~\"+hashtags[i],\"<a style=\\\"text-decoration:none; color:#6666ff\\\" href=\\\"/chip/\"+hashtags[i].toLowerCase()+\"\\\">\"+\"~\"+hashtags[i].toLowerCase()+\"</a>\");\n    console.log(newc);\n    contentq=newc;\n    group.push(hashtags[i]);\n    \n    }\n    console.log(group);\n    \n    var rawcontent=contentq;\n    var usernames = twitter.extractMentions(contentq);\n    var i\n    for (i = 0; i < usernames.length; i++) { \n    console.log(usernames[i]);\n    var newc = contentq.replace(\"@\"+usernames[i],\"<a style=\\\"text-decoration:none; color:#6666ff\\\" href=\\\"/user/\"+usernames[i]+\"\\\">\"+\"@\"+usernames[i]+\"</a>\");\n    console.log(newc);\n    contentq=newc;\n    User.findOne({username:usernames[i]}, function(err, doc) {\n        if (err) return next(err);\nif (doc == null) {\n    console.log(\"fail\");\n} else {\n       doc.notamount=doc.notamount+1;\n       doc.notifications.unshift({from: req.user.username, type: \"mention\", redirect:\"/cookie/\"+newid, mini:marked(contentq)});\n       doc.save();\n}\n    });\n    }\n    \n    contentq=contentq.replace(\"bae\",\"babe\");\n    contentq=contentq.replace(\"Bae\",\"Babe\");\n    contentq=contentq.replace(\"BAE\",\"BABE\");\n    contentq=contentq.replace(\"bAe\",\"bAbe\");\n    contentq=contentq.replace(\"baE\",\"babE\");\n    contentq=contentq.replace(\"BaE\",\"BabE\");\n    contentq=contentq.replace(\"bAE\",\"bAbE\");\n    contentq=contentq.replace(\"BAe\",\"BAbe\");\n        \n        \n    if (req.user.locked==false) {\n        var locked=false;\n    }\n    if (req.user.locked==true){\n        var locked=true;\n    }\n\nvar mycontent = contentq;\n// Emojis!!\nmycontent = mycontent.replace(\":)\",\"😊\");\nmycontent = mycontent.replace(\":D\",\"😄\");\nmycontent = mycontent.replace(\":(\",\"😔\");\nmycontent = mycontent.replace(\":*\",\"😘\");\nmycontent = mycontent.replace(\":|\",\"😐\");\nmycontent = mycontent.replace(\":>\",\"😌\");\nmycontent = mycontent.replace(\":&\",\"😏\");\nmycontent = mycontent.replace(\";)\",\"😉\");\nmycontent = mycontent.replace(\"xD\"||\"XD\",\"😂\");\nmycontent = mycontent.replace(\":P\"||\":p\",\"😛\");\nconsole.log(mycontent);\n//mynewcontent = mycontent.toLowerCase();\n//mynewcontent = mynewcontent.replace(badWord,\"****\");\n    var name = req.user.name;\n\n    var newpost = new Post({\n        //title: mynewtitle,\n        _id:newid,\n        names: name,\n        author: authorq,\n        _author: req.user.id,\n        content: marked(mycontent),\n        avatarurl: req.user.avatarurl,\n        rawcontent:rawcontent,\n        myurl: mynewurl,\n        link: gurl,\n        color: color,\n        group: group,\n        spam: 0,\n        likes: 0,\n        dislikes: 0,\n        rebakes: 0,\n        locked:locked,\n        commentamount: 0,\n        created: new Date().toUTCString(),\n    });\n    newpost.save();\n    res.redirect('/');\n});\n\n\n/* Post Cookie */\nrouter.post('/updatecookie/:id', ensureAuthenticated, function(req, res, next) {\n    var id=req.params.id;\n    var contentq = req.body.texxtt;\n    var gurl=req.body.urlbox;\n    var color=\"blacK\";\n    var mynewurl;\n    var group=[];\n    var ggroup=req.body.groupbox;\n    var rawcontent=contentq;\n\nvar gurl=gurl;\n\nif (gurl==\"\" || gurl==\" \"){\n    gurl=\"\";\n}\n\nif (gurl!=\"\") {\nif (gurl.startsWith(\"http://\")||gurl.startsWith(\"https://\")) {\n    gurl=gurl;\n}\n}\n\n    var hashtags = twitter.extractHashtags(contentq);\n    var i\n    for (i = 0; i < hashtags.length; i++) { \n    console.log(hashtags[i]);\n    var newc = contentq.replace(\"~\"+hashtags[i],\"<a style=\\\"text-decoration:none; color:#6666ff\\\" href=\\\"/chip/\"+hashtags[i]+\"\\\">\"+\"~\"+hashtags[i]+\"</a>\");\n    console.log(newc);\n    contentq=newc;\n    group.push(hashtags[i]);\n    \n    }\n\nvar usernames = twitter.extractMentions(contentq);\n    var i\n    for (i = 0; i < usernames.length; i++) { \n    console.log(usernames[i]);\n    var newc = contentq.replace(\"@\"+usernames[i],\"<a style=\\\"text-decoration:none; color:#6666ff\\\" href=\\\"/user/\"+usernames[i]+\"\\\">\"+\"@\"+usernames[i]+\"</a>\");\n    console.log(newc);\n    contentq=newc;\n    User.findOne({username:usernames[i]}, function(err, doc) {\n                if (err) return next(err);\nif (doc == null) {\n    console.log(\"fail\");\n} else {\n        if (err) return next(err);\n       doc.notamount=doc.notamount+1;\n       doc.notifications.unshift({from: req.user.username, type: \"mentionedit\", redirect:\"/cookie/\"+id, mini:marked(contentq)});\n       doc.save();\n}\n    });\n    }\n\n    \n    contentq=contentq.replace(\"bae\",\"babe\");\n    contentq=contentq.replace(\"Bae\",\"Babe\");\n    contentq=contentq.replace(\"BAE\",\"BABE\");\n    contentq=contentq.replace(\"bAe\",\"bAbe\");\n    contentq=contentq.replace(\"baE\",\"babE\");\n    contentq=contentq.replace(\"BaE\",\"BabE\");\n    contentq=contentq.replace(\"bAE\",\"bAbE\");\n    contentq=contentq.replace(\"BAe\",\"BAbe\");\n        \n\nvar mycontent = contentq;\n// Emojis!!\nmycontent = mycontent.replace(\":)\",\"😊\");\nmycontent = mycontent.replace(\":D\",\"😄\");\nmycontent = mycontent.replace(\":(\",\"😔\");\nmycontent = mycontent.replace(\":*\",\"😘\");\nmycontent = mycontent.replace(\":|\",\"😐\");\nmycontent = mycontent.replace(\":>\",\"😌\");\nmycontent = mycontent.replace(\":&\",\"😏\");\nmycontent = mycontent.replace(\";)\",\"😉\");\nmycontent = mycontent.replace(\"xD\"||\"XD\",\"😂\");\nmycontent = mycontent.replace(\":P\"||\":p\",\"😛\");\n\nPost.findOne({_id:id}, function(err, doc) {\n    if (err) return next(err);\n    doc.content=marked(mycontent);\n    doc.rawcontent=rawcontent;\n    doc.group=group;\n    doc.link=gurl;\n\n    doc.save();\n});\n    res.redirect('/');\n});\n\n\nrouter.get('/cookie/:id', ensureAuthenticated, function(req, res) {\n  Post.findOne({ _id: req.params.id }, function(err, result) {\n    if (err) throw err;\n    if (result== null) {\n    console.log(\"fail\");\n    res.redirect('/');\n} else {\n    console.log(result);\n    console.log(result.commentlist);\n    User.findOne({username:result.author}, function(err, doc) {\n        if (err) throw err;\n    res.render('post', { title: result.rawcontent, result: result, person:doc, user: req.user });\n    });\n}\n  });\n  });\n  \n  router.get('/chip/:groupid', function(req, res) {\n  Post.find({ group: req.params.groupid },null, { sort: '-created' }, function(err, result) {\n    if (err) throw err;\n    res.render('group', { title: \"~\"+req.params.groupid, result: result, user: req.user, groupname:req.params.groupid });\n    });\n  });\n\nrouter.post(\"/sendcomment/:id\", function(req, res, next) {\n    var badWord = /fuck|shit|cunt|damn|nigger|nigga|twat|dick|cum|tits|titties|boob|boobs|penis|cock|bbc|porn|pornography|rape|sex|orgasm|raping|bitch|ass|clit|clitoris|breast|breasts|wigger|faggot/gi;\n    var commentval = req.body.commentbox;\n    var name=req.user.username;\n    var newid = mongoose.Types.ObjectId();\n    commentval = commentval.replace(\":)\",\"😊\");\n    commentval = commentval.replace(\":D\",\"😄\");\n    commentval = commentval.replace(\":(\",\"😔\");\n    commentval = commentval.replace(\":*\",\"😘\");\n    commentval = commentval.replace(\":|\",\"😐\");\n    commentval = commentval.replace(\":>\",\"😌\");\n    commentval = commentval.replace(\":&\",\"😏\");\n    commentval = commentval.replace(\";)\",\"😉\");\n    commentval = commentval.replace(\"xD\"||\"XD\",\"😂\");\n    commentval = commentval.replace(\":P\"||\":p\",\"😛\");\n    //var mynewcomment = commentval.toLowerCase();\n    //var newcomq = mynewcomment.replace(badWord,\"****\");\n    //commentval=newcomq;\n    var id=req.params.id;\n    \n    var usernames = twitter.extractMentions(commentval);\n    var i\n    for (i = 0; i < usernames.length; i++) { \n    console.log(usernames[i]);\n    var newc = commentval.replace(\"@\"+usernames[i],\"<a style=\\\"text-decoration:none; color:#6666ff\\\" href=\\\"/user/\"+usernames[i]+\"\\\">\"+\"@\"+usernames[i]+\"</a>\");\n    console.log(newc);\n    commentval=newc;\n    User.findOne({username:usernames[i]}, function(err, doc) {\n        if (err) return next(err);\n       doc.notamount=doc.notamount+1;\n       doc.notifications.unshift({from: req.user.username, type: \"commention\", redirect:\"/cookie/\"+id, mini:marked(commentval)});\n       doc.save();\n    });\n    }\n    \n    Post.findOne({\"_id\" : id}, function (err, docs){\n        docs.commentslist.push({ _id: newid, value: marked(commentval), likes: 0, dislikes: 0, user: name, _author: req.user.id, created: new Date() });\n        docs.commentamount=docs.commentamount+1;\n        docs.save();\n        if (err) throw err;\n    User.findOne({username:docs.author}, function(err, doc) {\n        if (err) return next(err);\n       doc.notamount=doc.notamount+1;\n       doc.notifications.unshift({from: req.user.username, type: \"comment\", redirect:req.params.id, mini:marked(commentval)});\n       doc.save();\n    });\n});\n    res.redirect(\"/cookie/\"+id);\n});\n\n\n/* user page */\nrouter.get('/user/:user', function(req, res, next) {\n    \n    console.log(req.params.user);\n    \n    User.findOne({ username: req.params.user }, function(err, usera) {\n        console.log(usera);\n        if (err) {\n            res.redirect('/');\n        }\nif (usera == null) {\n    console.log(\"fail\");\n    res.redirect('/');\n} else {\n        Post.find({ \"author\": usera.username}, null, { sort: '-created' }, function(err, post) {\n            if (err) return next(err);\n            if (req.user) {\n                if (req.user.username==req.params.user){\n                    \n                   res.render('me', {user: req.user, title: usera.username, posts: post, posts1: usera.poststo, account: usera});\n                } else {\n                        User.findById(req.user.id, function(err, doc){\n                         var nid = req.params.user.toString();\n                         var nlikes = doc.following.toString();\n                          var test = nlikes.indexOf(nid);\n                           console.log(test);\n                               if (test<0){\n                                   console.log(usera.locked);\n                                   if (usera.locked==true) {\n                                     var buttontext=\"Request Follow\";\n                                   } else {\n                                       var buttontext=\"Follow\";\n                                   }\n                              } else if (test>=0) {\n                           var buttontext=\"Unfollow\";\n                      if (err) throw err;\n                  }\n            res.render('user', {user: req.user, buttontext: buttontext, title: usera.username, posts: post, posts1: usera.poststo, account: usera});\n        });\n        }   \n      } else {\n    res.render('user', {user: req.user, title: usera.username, posts: post, posts1: usera.poststo, account: usera});\n}\n});\n}\n});\n});\n\n////////////////////// Stuck /////////////////////\nrouter.post(\"/sendtouser/:id\", function(req, res, next) {\n    var badWord = /fuck|shit|cunt|damn|nigger|nigga|twat|dick|cum|tits|titties|boob|boobs|penis|cock|bbc|porn|pornography|rape|sex|orgasm|raping|bitch|ass|clit|clitoris|breast|breasts|wigger|faggot/gi;\n    var commentval = req.body.msgbox;\n    commentval = commentval.replace(\":)\",\"😊\");\n    commentval = commentval.replace(\":D\",\"😄\");\n    commentval = commentval.replace(\":(\",\"😔\");\n    commentval = commentval.replace(\":*\",\"😘\");\n    commentval = commentval.replace(\":|\",\"😐\");\n    commentval = commentval.replace(\":>\",\"😌\");\n    commentval = commentval.replace(\":&\",\"😏\");\n    commentval = commentval.replace(\";)\",\"😉\");\n    commentval = commentval.replace(\"xD\"||\"XD\",\"😂\");\n    commentval = commentval.replace(\":P\"||\":p\",\"😛\");\n    //var mynewcomment = commentval.toLowerCase();\n    //var newcomq = mynewcomment.replace(badWord,\"****\");\n    //commentval=newcomq;\n    var id=req.params.id;\n    console.log(req.body.msgbox);\n    User.findOne({\"_id\" : id}, function (err, doc){\n        console.log(doc.username);\n        doc.poststo.push({ keys: marked(commentval), author: req.user.username, _author: req.user.id, created: new Date() });\n        doc.notamount=doc.notamount+1;\n       doc.notifications.unshift({from: req.user.username, type: \"postto\", redirect:req.params.id, mini:marked(commentval)});\n        doc.save();\n        if (err) throw err;\n    res.redirect(\"/user/\"+doc.username);\n    });\n});\n///////////////////////////////////////////////////\n\n/* GET settings page. */\nrouter.get('/settings', ensureAuthenticated, function(req, res, next) {\n    if (req.user){\n    res.render('settings', { title: 'Settings', user: req.user});\n    } else {\n        res.redirect(\"/\");\n    }\n});\n\n/* SET profile picture */\nrouter.post('/updatepp/:usera', ensureAuthenticated, function(req, res, next) {\n    var value=req.body.url;\n    console.log(value);\n    User.findOneAndUpdate({ _id: req.params.usera }, { avatarurl: value }, function(err, doc) {\n    if (err) throw err;    \n    });\n    Post.update({_author: req.params.usera}, {avatarurl: req.body.url}, {multi: true}, function(err) {\n        if (err) throw err;\n    });\n    res.redirect('/settings');\n});\n\n/* SET profile picture */\nrouter.post('/update/updatecp/:id', ensureAuthenticated, function(req, res, next) {\n    var value=req.body.ppbox1;\n    console.log(value);\n    User.findOneAndUpdate({ _id: req.params.id }, { coverphotourl: value }, function(err, doc) {\n    if (err) throw err;    \n    });\n    res.redirect('/settings');\n});\n\n/* do some fucking awesome shit bitches */\nrouter.post('/update/displayName/:id', ensureAuthenticated, function(req, res, next) {\n    User.findOneAndUpdate({ _id: req.params.id }, { name: req.body.displayName}, function(err, doc) {\n        if (err) throw err;\n    });\n    Post.update({_author: req.params.id}, {names: req.body.displayName}, {multi: true}, function(err) {\n        if (err) throw err;\n    });\n    res.redirect('/settings');\n});\n\n/* do some fucking awesome shit bitches #2 */\nrouter.post('/update/username/:id', ensureAuthenticated, function(req, res, next) {\n    User.findOneAndUpdate({ _id: req.params.id }, { username: req.body.displayName }, function(err, doc) {\n        if (err) throw err;\n    });\n    Post.update({_author: req.params.id}, {author: req.body.displayName}, {multi: true}, function(err) {\n        if (err) throw err;\n    });\n    res.redirect('/user/'+req.body.displayName);\n});\n\n/* do some fucking awesome shit bitches #3!!!! */\nrouter.post('/update/colour/:id', ensureAuthenticated, function(req, res, next) {\n    console.log(req.body.colour);\n    User.findOneAndUpdate({ _id: req.params.id }, { themecolor: \"#\"+req.body.colour }, function(err, doc) {\n        if (err) throw err;\n    });\n    res.redirect('/settings');\n});\n\n/* do some fucking awesome shit bitches #4!!!! */\nrouter.post('/update/bio/:id', ensureAuthenticated, function(req, res, next) {\n    User.findOneAndUpdate({ _id: req.params.id }, { bio: req.body.bio }, function(err, doc) {\n        if (err) throw err;\n    });\n    res.redirect('/settings');\n});\n\n/* do some fucking awesome shit bitches #4!!!! */\nrouter.get('/deleteme/:id', ensureAuthenticated, function(req, res, next) {\n    User.findOneAndRemove({ _id: req.params.id }, function(err, post) {\n        if (err) return next (err);\n    });\n    res.redirect('/');\n});\n\n\n/* follow a damn user */\nrouter.get('/Follow/:user', ensureAuthenticated, function(req, res, next) {\n    if (req.user){\n    \n    User.findById(req.user.id, function(err, doc){\n        if (err) return next(err);\n        \n        var nid = req.params.user.toString();\n        var nlikes = doc.following.toString();\n        var test = nlikes.indexOf(nid);\n        \n        console.log(test);\n\n            if (test<=0){\n                \n                doc.following.push(req.params.user);\n                \n                doc.save();\n                console.log(doc);\n                \n                User.findOne({username:req.params.user}, function(err, doc) {\n                    if (err) return next(err);\n                    doc.followers.push(req.user.username);\n                    console.log(doc);\n       doc.notamount=doc.notamount+1;\n       doc.notifications.unshift({from: req.user.username, type: \"follower\", redirect:req.params.id});\n       doc.save();\n         });\n                \n                res.redirect('/user/'+req.params.user);\n           \n                    \n            } else if (test>0) {\n                res.redirect('/user/'+req.params.user);\n            }\n        }); \n    } else {\n        res.redirect(\"/\");\n    }\n    });\n    \n    /* unfollow a damn user */\nrouter.get('/Unfollow/:user', ensureAuthenticated, function(req, res, next) {\n    if (req.user){\n    User.findOneAndUpdate({username: req.user.username}, {$pull: {following: req.params.user}}, function(err, org) {\n        if (err) return next(err);\n        User.findOneAndUpdate({username:req.params.user}, {$pull: {followers: req.user.username}}, function(err,org) {\n            if (err) return next(err);\n        org.save();\n        });\n});\n    res.redirect('/user/'+req.params.user);\n    } else {\n        res.redirect(\"/\");\n    }\n});\n\nrouter.get('/deletecookie/:name/:id', ensureAuthenticated, function(req, res, next) {\n    Post.findOneAndRemove({ _id: req.params.id }, function(err, post) {\n        if (err) return next(err);\n        res.redirect('/');\n    });\n});\n\nrouter.get('/deletepostto/:name/:id', ensureAuthenticated, function(req, res, next) {\n    User.findOne({username: req.params.name}, function(err, org) {\n        if (err) return next(err);\n        org.poststo.pull(req.params.id);\n        org.save();\n        res.redirect('/poststome/'+req.user.username);\n    });\n});\n\nrouter.get('/editcookie/:name/:id', ensureAuthenticated, function(req, res, next) {\n    if (req.user) {\n    Post.findOne({ _id: req.params.id }, function(err, post) {\n        if (err) return next(err);\n        console.log(post.content);\n        res.render('editcookie', {post:post, user:req.user});\n    });\n    } else {\n        res.redirect(\"/\");\n    }\n});\n\nrouter.get('/following/:name', ensureAuthenticated, function(req, res, next) {\n    if (req.user){\n    User.findOne({username: req.params.name}, function(err, doc) {\n        if (err) return next(err);\n        console.log(doc.following);\n        \n    res.render('following', {title:\"Following\", user:req.user, followingsnew:doc.following});\n});\n} else {\n    res.redirect(\"/\");\n}\n});\n\nrouter.get('/followers/:name', ensureAuthenticated, function(req, res, next) {\n    if (req.user){\n   User.findOne({username: req.params.name}, function(err, doc) {\n        if (err) return next(err);\n        console.log(doc.followers);\n        \n    res.render('followers', {title:\"Followers\", user:req.user, followersnew:doc.followers});\n});\n} else {\n    res.redirect(\"/\");\n}\n}); \n\nrouter.get('/notifications', ensureAuthenticated, function(req, res, next) {\n    if (req.user){\n   User.findOne({username: req.user.username}, function(err, doc) {\n        if (err) return next(err);\n        doc.notamount=0;\n        doc.save();\n        console.log(doc.notifications);\n    res.render('notifications', {title:\"Notifications\", user:req.user, notifications:doc.notifications});\n});\n} else {\n    res.redirect(\"/\");\n}\n}); \n\nrouter.get('/clearnotes', ensureAuthenticated, function(req, res, next) {\n    if (req.user){\n    User.findOne({username:req.user.username}, function(err, doc) {\n       if (err) throw err; \n       doc.notifications=[];\n       doc.notamount=0;\n       doc.save();\n    });\n    res.redirect('/notifications');\n    } else {\n        res.redirect(\"/\");\n    }\n});\n\nrouter.get('/poststome/:name', ensureAuthenticated, function(req, res, next) {\n    if (req.user){\nUser.findOne({ username: req.params.name }, function(err, usera) {\n    if (err) return next(err);\n    res.render('poststome', {title:\"Posts to Me\", posts:usera.poststo, user:req.user});\n});\n} else {\n    res.redirect(\"/\");\n}\n});\n\nrouter.get('/posttoel/:name', ensureAuthenticated, function(req, res, next) {\n    if (req.user){\nUser.findOne({ username: req.params.name }, function(err, usera) {\n    if (err) return next(err);\n    res.render('posttoel', {title:\"Posts to \"+usera.username, posts:usera.poststo, users:usera, user:req.user});\n});\n} else {\n    res.redirect(\"/\");\n}\n});\n\nrouter.get('/followme', ensureAuthenticated, function(req, res, next) {\nUser.findOne({ username: req.user.username }, function(err, usera) {\n    if (err) throw err;\n    usera.followers.push(req.user.username);\n});\nres.redirect('/');\n});\n\nrouter.get('/search', ensureAuthenticated, function(req, res, next) {\n    User.find({}, function(err, users) {\n        if(err) return next(err);\n      res.render('search', {user:req.user, users:users});  \n    })\n\n});\n\nrouter.get('/about', ensureAuthenticated, function(req, res, next) {\n      res.render('about', {user:req.user, title:\"About ShareCookie\"});  \n\n});\n\nrouter.get('/message/:user', function(req, res, next) {\n    Message.findOne({ 'users':  [ req.user.username, req.params.user ] }, function(err, messages) {\n        if (err) return next (err);\n        User.findOne({'username':req.params.user}, function(err, doc) {\n            if (err) return next (err);\n    res.render('message', {user:req.user, messages:messages, otro:doc});\n});\n            \n        });\n});\n\nrouter.get('/lockme/:user', function(req, res, next) {\n    \n    User.findOne({_id:req.params.user}, function(err, doc) {\n        if (err) return next(err);\n            console.log(doc.locked);\n        if (doc.locked===false){\n            User.findOneAndUpdate({_id:req.params.user}, {locked:true}, function(err, docs) {\n                if(err)return next(err);\n            \n            Post.update({_author:req.params.user}, {locked:true}, {multi: true}, function(err, users) {\n                if (err) return next (err);\n            });\n            });\n        }\n        if (doc.locked===true){\n            User.findOneAndUpdate({_id:req.params.user}, {locked:false}, function(err, docs) {\n                if(err)return next(err);\n            \n            Post.update({_author:req.params.user}, {locked:false}, {multi: true},  function(err, users) {\n                if (err) return next (err);\n            });\n            });\n        }\n    });\nres.redirect('/settings');\n});\n\n/*/*\nrouter.get('/searchfollowing', function(req, res, next) {\n    var val=req.body.searchbox;\n     User.findOne({username: req.user.username}, function(err, doc) {\n         if (err) return next(err);\n         var check=doc.following.indexOf(\"val\");\n            if (check<0) {\n                res.render('following', {title:\"Following\", message:\"User not found!\"});\n            } else {\n                res.redirect(\"/user/\"+val);\n            }\n     });\n});*/\n\nfunction ensureAuthenticated(req, res, next) {\n  if (req.isAuthenticated())\n    return next();\n  else\n    return res.redirect('/')\n}\n\nmodule.exports = router;","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":558,"scrollleft":498,"selection":{"start":{"row":53,"column":168},"end":{"row":53,"column":168},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":26,"state":"comment1","mode":"ace/mode/javascript"}},"timestamp":1457148391000}